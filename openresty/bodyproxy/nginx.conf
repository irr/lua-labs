worker_processes  1;
daemon off;
user irocha;

# logs to console (docker)
error_log /dev/stderr info;

# nginx events tuning
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    map $host $prefix {
        # dev/host environment
        default  "/home/irocha/lua/openresty/bodyproxy";
    }

    # access log JSON format (docker)
    log_format le_json '{ "time": "$time_iso8601", '
     '"remote_addr": "$remote_addr", '
     '"remote_user": "$remote_user", '
     '"body_bytes_sent": "$body_bytes_sent", '
     '"request_time": "$request_time", '
     '"status": "$status", '
     '"request": "$request", '
     '"request_method": "$request_method", '
     '"http_referrer": "$http_referer", '
     '"http_user_agent": "$http_user_agent" }';

    access_log /dev/stderr le_json;

    # set local resolver (docker)
    resolver 127.0.1.1;
    resolver_timeout 5s;

    # lua code cache disable (must be enable in production)
    lua_code_cache off;

    proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache:60m max_size=1G;

    server {
        listen 8080;

        location / {
            proxy_http_version  1.1;
            proxy_set_header    Host 127.0.0.1:8000;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto http;
            proxy_pass          http://127.0.0.1:8000;

            proxy_cache      cache;
            proxy_cache_valid  200 30s;

            # Reset the response's content_length, so that Lua can generate a
            # body with a different length.
            header_filter_by_lua 'ngx.header.content_length = nil';

            body_filter_by_lua_file "$prefix/proxy.lua";
        }
    }

    #######################################
    #          TEST ENVIRONMENT           #
    #######################################

    server {
        listen 127.0.0.1:8000;

        location / {
            content_by_lua_file  "$prefix/dump.lua";
        }
    }
}
