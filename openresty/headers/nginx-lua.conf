worker_processes  1;

daemon off;
master_process off;
error_log  stderr  info;

events {
    worker_connections 1024;
}

http {
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush off;

    keepalive_timeout 30;

    gzip on;

    lua_package_path "/home/irocha/github/lua-labs/openresty/headers/lib/?.lua;;";

    init_by_lua_block {
        ck = require "resty.cookie"
        json = require "cjson"
    }

    log_format log_json escape=json
        '{'
            '"timestamp": "$time_iso8601",'
            '"request_time": $request_time,'
            '"remote_addr": "$remote_addr",'
            '"x_forwarded_for": "$http_x_forwarded_for",'
            '"vhost": "$server_name",'
            '"method": "$request_method",'
            '"uri": "$uri",'
            '"query_parameters": "$query_string",'
            '"protocol": "$server_protocol",'
            '"status": $status,'
            '"bytes_sent": $bytes_sent,'
            '"request_length": $request_length,'
            '"request_id": "$request_id",'
            '"referer": "$http_referer",'
            '"user_agent": "$http_user_agent",'
            '"metadata": "$metadata"'
        '}';

    access_log logs/access.log log_json;

    server {
        listen 8080;
        server_name localhost;

        charset UTF-8;

        set $metadata '';

        header_filter_by_lua_block {
            local info = {headers={}, cookies={}, total=0}
            local headers = ngx.req.get_headers()
            for k, v in pairs(headers) do
                if k == "cookie" then
                    local cookie, _ = ck:new()
                    if cookie then
                        local fields, _ = cookie:get_all()
                        if fields then
                            for fn, fv in pairs(fields) do
                                info["cookies"][fn] = string.len(fn) + string.len(fv)
                            end
                        end
                    end
                end
                info["headers"][k] = string.len(k) + string.len(v)
                info["total"] = info["total"] + info["headers"][k]
            end

            ngx.var.metadata = json.encode(info)
        }

        location / {
            content_by_lua_block {
                ngx.exit(204)
            }
        }
    }
}
