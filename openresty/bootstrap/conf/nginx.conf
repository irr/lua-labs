# openresty -p ~/tmp/ -c `pwd`/conf/nginx.conf

env BASE_PATH;

daemon off;
worker_processes  1;
error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    include                         /usr/local/openresty/nginx/conf/mime.types;

    lua_ssl_verify_depth            2;
    lua_ssl_trusted_certificate     /etc/ssl/certs/ca-certificates.crt;

    lua_code_cache on;

    resolver 1.1.1.1 ipv6=off;

    tcp_nopush on;
    tcp_nodelay on;

    sendfile on;

    reset_timedout_connection on;

    large_client_header_buffers 4 16k;

    proxy_buffer_size           8k;
    proxy_buffers               8 8k;
    proxy_busy_buffers_size     16k;

    charset         utf-8;
    charset_types   application/json;
    default_type    application/json;

    log_subrequest on;

    log_format json_combined escape=json
        '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent"'
        '}';

    access_log /dev/stdout json_combined;

    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '/home/irocha/github/lua-labs/openresty/bootstrap/lib/?.lua;;';

    # set search paths for Lua external libraries written in C (can also use ';;'):
    lua_package_cpath '/home/irocha/github/lua-labs/openresty/bootstrap/lib/?.so;;';

    server {
        listen 8080;

        client_max_body_size    10M;
        client_body_buffer_size 64K;

        keepalive_timeout       15;

        location / {
            content_by_lua_file /home/irocha/github/lua-labs/openresty/bootstrap/main.lua;
        }

        location /google {
            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()
                local res, err = httpc:request_uri('https://www.google.com/')
                if not res then
                    ngx.say("failed to request: ", err)
                    return
                end
                ngx.say(res.body)
            }
        }

    }
}
